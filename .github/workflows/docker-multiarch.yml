name: Build and Publish Docker (multi-arch)

on:
  push:
    tags:
      - 'v*'
      - 'V*'
  workflow_dispatch: {}

permissions:
  contents: read
  packages: write

env:
  # GHCR target (defaults to ghcr.io/<owner>/<repo>)
  GHCR_IMAGE: ghcr.io/${{ github.repository }}
  # Optional Docker Hub repository (e.g., myuser/rgsx). Set via repo variable or secret.
  DOCKERHUB_IMAGE: ${{ vars.DOCKERHUB_IMAGE || secrets.DOCKERHUB_IMAGE }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Detect and build Web UI (optional)
        id: web
        run: |
          set -e
          if [ -f "rgsx_web/ui/package.json" ]; then
            echo "ui=1" >> $GITHUB_OUTPUT
          else
            echo "ui=0" >> $GITHUB_OUTPUT
          fi

      - name: Set up Node.js
        if: steps.web.outputs.ui == '1'
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: rgsx_web/ui/package-lock.json

      - name: Build frontend
        if: steps.web.outputs.ui == '1'
        working-directory: rgsx_web/ui
        run: |
          npm ci
          npm run build
          # Copy build output into static dir expected by the image
          mkdir -p ../static
          if [ -d "dist" ]; then
            rsync -a --delete dist/ ../static/
          elif [ -d "build" ]; then
            rsync -a --delete build/ ../static/
          else
            echo "No dist/ or build/ output found after npm run build" >&2
            exit 1
          fi

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub (optional)
        if: ${{ env.DOCKERHUB_IMAGE != '' && secrets.DOCKERHUB_USERNAME != '' && secrets.DOCKERHUB_TOKEN != '' }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Derive tags
        id: vars
        run: |
          REF_NAME="${GITHUB_REF_NAME}"
          echo "version=${REF_NAME}" >> $GITHUB_OUTPUT
          # Example outputs:
          echo "ghcr_tags=${GHCR_IMAGE}:${REF_NAME},${GHCR_IMAGE}:latest" >> $GITHUB_OUTPUT
          if [ -n "${DOCKERHUB_IMAGE}" ]; then
            echo "dh_tags=${DOCKERHUB_IMAGE}:${REF_NAME},${DOCKERHUB_IMAGE}:latest" >> $GITHUB_OUTPUT
          fi

      - name: Build and push (GHCR)
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          push: true
          provenance: false
          tags: ${{ steps.vars.outputs.ghcr_tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Build and push (Docker Hub)
        if: ${{ steps.vars.outputs.dh_tags != '' }}
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          push: true
          provenance: false
          tags: ${{ steps.vars.outputs.dh_tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
